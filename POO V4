import mysql.connector
import random

# Connexion √† la base de donn√©es
def get_db_connection():
    return mysql.connector.connect(
        host='0504-srv-sig',
        database='nsi_eleve8',
        user='nsi_eleve8',
        password='eleve8'
    )

# Classe Joueur
class Joueur:
    def __init__(self, id, pseudo, deck, batiments_data):
        self.id = id
        self.pseudo = pseudo
        self.deck = deck  # Liste de cartes
        self.batiments = [Batiment(bat["nom"]) for bat in batiments_data]

# Classe Batiment
class Batiment:
    def __init__(self, nom):
        self.nom = nom
        self.points_de_vie = 200 if "Gauche" in nom or "Droite" in nom else 250  # Sp√©cifique pour les b√¢timents de gauche/droite et du centre

# Charger un joueur √† partir de la base de donn√©es
def charger_joueur(pseudo):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    # Requ√™te pour obtenir les informations du joueur
    cursor.execute("SELECT * FROM Joueurs WHERE pseudo = %s", (pseudo,))
    joueur = cursor.fetchone()

    # V√©rification si le joueur existe
    if joueur is None:
        raise Exception(f"Le joueur {pseudo} n'a pas √©t√© trouv√© dans la base de donn√©es.")
    
    joueur_id = joueur["id"]

    # R√©cup√©rer le deck du joueur
    cursor.execute("""
        SELECT Cartes.id, Cartes.nom, Cartes.type, Cartes.degats, Cartes.protection
        FROM Decks
        JOIN Cartes ON Decks.carte_id = Cartes.id
        WHERE Decks.joueur_id = %s
    """, (joueur_id,))
    cartes = cursor.fetchall()
    random.shuffle(cartes)  # M√©langer le deck

    # R√©cup√©rer les b√¢timents du joueur
    cursor.execute("""
        SELECT Batiments.nom
        FROM Batiments_Joueurs
        JOIN Batiments ON Batiments_Joueurs.batiment_id = Batiments.id
        WHERE Batiments_Joueurs.joueur_id = %s
        ORDER BY Batiments_Joueurs.id ASC
    """, (joueur_id,))
    batiments = cursor.fetchall()

    conn.close()

    # Retourner l'objet Joueur
    return Joueur(id=joueur_id, pseudo=joueur["pseudo"], deck=cartes, batiments_data=batiments)

# Afficher l'√©tat du jeu
def afficher_etat_jeu(joueur1, joueur2):
    print(f"üéÆ D√©but de la partie : {joueur1.pseudo} VS {joueur2.pseudo} üéÆ\n")
    print(f"{joueur1.pseudo} a pour deck :")
    for carte in joueur1.deck:
        print(f"- {carte['nom']} ({carte['type']}) : {carte['degats']} d√©g√¢ts / {carte['protection']} protection")
    print(f"B√¢timents de {joueur1.pseudo}:")
    for batiment in joueur1.batiments:
        print(f"- {batiment.nom} : {batiment.points_de_vie} PV")

    print(f"\n{joueur2.pseudo} a pour deck :")
    for carte in joueur2.deck:
        print(f"- {carte['nom']} ({carte['type']}) : {carte['degats']} d√©g√¢ts / {carte['protection']} protection")
    print(f"B√¢timents de {joueur2.pseudo}:")
    for batiment in joueur2.batiments:
        print(f"- {batiment.nom} : {batiment.points_de_vie} PV")

# Fonction pour lancer la partie
def lancer_partie(pseudo1, pseudo2):
    try:
        joueur1 = charger_joueur(pseudo1)
        joueur2 = charger_joueur(pseudo2)

        afficher_etat_jeu(joueur1, joueur2)

        # Vous pouvez ajouter ici la logique du combat (ex : attaque, d√©fense, calcul des d√©g√¢ts, etc.)

    except Exception as e:
        print(f"Erreur : {e}")

# Lancer la partie
lancer_partie("Alpha", "Bravo")
